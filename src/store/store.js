// We need to import the variables declared in firebase.js
import { firebaseAuth, firebaseDb } from "boot/firebase"
import { boot } from "quasar/wrappers"

const state = {
    // Store user datails for the application
    userDetails : {}
}

const mutations = {
    // User details need a mutation
    setUserDetails(state, payload) {
        state.userDetails = payload
    }
}

const actions = {
    // Payload is the data passed in via LoginRegister.vue component
    registerUser({}, payload) {
        firebaseAuth.createUserWithEmailAndPassword(payload.email, payload.password)
        .then(response => {
            // Success
            console.log(response)
            // Recover the id generated by firebase, we will use it in our
            // table.
            let userId = firebaseAuth.currentUser.uid
            // This part adds the user to our users table in the database
            // this is not on the auth system.
            firebaseDb.ref('users/' + userId).set({
                name: payload.name,
                email: payload.email,
                online: true
            })
        })
        .catch(error => {
            console.log(error.message)
        })
    },
    loginUser({}, payload) {
        firebaseAuth.signInWithEmailAndPassword(payload.email, payload.password)
        .then(response => {
            // Success
           console.log("User logged in!")
        })
        .catch(error => {
            console.log(error.message)
        })
    },
    logoutUser() {
        firebaseAuth.signOut()
    },
    handleAuthStateChanged({ commit, dispatch, state }) {
        // This is a firebase hook
        firebaseAuth.onAuthStateChanged(user => {
        if (user) {
            // LOGGED IN
            // User is logged in.
            // Get a ref to the firebase aut
            let userId = firebaseAuth.currentUser.uid
            // We only want to get this once when the user logs in
            firebaseDb.ref('users/' + userId).once('value', snapshot => {
                let userDetails = snapshot.val()
                // Commit the mutation
                commit('setUserDetails', {
                    // set payload
                    name: userDetails.name,
                    email: userDetails.email,
                    userId: userId
                })
                // Set online to true
                dispatch('firebaseUpdateUser', {
                    // payload to send to firebase.
                    // In sql this would translate to UPDATE Users SET online=True WHERE UserId=UserId
                    userId: userId,
                    updates: {
                        online: true
                    }
                })
                // Get all the users in the database
                dispatch('firebaseGetUsers')
                // This is a response.redirect
                this.$router.push('/')
            })
        } else {  
            // LOGGED OUT 
            // This is a response.redirect
            // First clear the history so the user can't go back
            dispatch('firebaseUpdateUser', {
                    // We need to add state to the signature of the method above,
                    // because we can't access the userDetails otherwise
                    userId: state.userDetails.userId,
                    updates: {
                        online: false
                    }
                })
            // The user is logged out
            // reset the login must be executed after dispatch otherwise 
            // userDetails object is empty!
            commit('setUserDetails', {})
            this.$router.replace('/auth')
        }
        });
    },
    firebaseUpdateUser({}, payload) {
        // setup a ref
        firebaseDb.ref('users/' + payload.userId).update(payload.updates)
    },
    firebaseGetUsers() {
        // get a ref to the database
        firebaseDb.ref('users/').on('child_added', snapshot => {
            let userDetails = snapshot.val()
            console.log(userDetails)
        })
    }
}

const getters = {
}

export default {
    namespaced: true,
    state,
    mutations,
    actions,
    getters
}